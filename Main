


#-------------- check  INPUT -------------------

if  [ "$1" != "--help" ]  &&  [  "$1" != "-h"  ]  && [ "$1" != "--version" ] && [ "$1" != "-v" ]  \
 && [ "$1" != "--delete" ]  && [ "$1" != "-d" ]  &&  [ "$1" != "--create" ] && [ "$1" != "-c" ]
then
    echo "                  "
    echo "   Try 'project  --help'  for more information. "
    echo "                                        "
#Exit Failed
    exit;
fi

#--------------------------------------



#------------ version  Command  -----------------


if [ "$1" = "--version" ] || [ "$1" = "-v" ]
then
       echo "                       "
       echo "AUTHOR                 "
       echo "        Written by Mohsen Ijbari and Hanieh Jafari . "
       echo "VERSION  "
       echo "        Software  version 1.0,not  Support assagin Description to instances "
       echo "                       "
fi




#------------------  help Command   --------------

if [ "$1" = "--help" ]  ||  [  "$1" = "-h"  ]
then
   echo "                                    "
   echo "NAME    "
   echo "         project  -  Script will Management  Openstack ansible "
   echo "SYNOPSIS "
   echo "         project  [options] [filepath]     "
   echo "         project  [options] -             "

   echo "                                          "
   echo "EXANPLE                                   "
   echo "         project -c                       "
   echo "         project -c ./openrc              "
   echo "                                          "

   echo "DESCRIPTION                               "
   echo " A shell in a Linux operating system takes input \
   from you in the form of commands, processes it,\
   and then gives an output. It is the interface through \
   which a user works on the programs, commands, and scripts.\
   A shell is accessed by a terminal which runs it."

   echo "                                          "
   echo "OPTIONES                                  "
   echo " -h,  --help             "
   echo "             display this help command  "
   echo " -v,  --version          "
   echo "             output version information "
   echo " -d,  --delete           "
   echo "             delete instance  User's projet  "
   echo " -c,  --create           "
   echo "             create instance  User's project  "

   echo " AUTHOR "
   echo "        Written by Mohsen Ijbari and Hanieh Jafari .  "
   echo " REPORTING BUGS "
   echo "        Report ls translation bugs to <m.ijbari@mail.um.ac.i> . "
   echo " COPYRIGHT  "
   echo "        Copyright  2020 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>. "
   echo "        This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law. "
   echo " SEE ALSO  "
   echo "        Full documentation at: <http://www.itc.usb.ac.ir/document/software/coreutils/phase2> ."
echo "                                                      "
   echo "                                                      "
   echo  -e   " Enter Key Q or CTL+C for Quit  Manual   : \c "
   read  Key

   if [ "$Key" = "q" ]
      then
          exit;
   else
        echo  -e   " Enter Key Q or CTL+C for Quit  Manual   : \c "
        read  Key
   fi
fi


#--------- Get PATH Authentication ----------------------------

 if ( test  -z "$2"  )  && ( [ "$1" = "-create" ]  ||  [  "$1" = "-c"  ]  ||  [ "$1" = "--delete" ] || [ "$1" = "-d" ] )
  then
      echo "                               "
      echo  -e  " Please enter the directory PATH  "Authentication decription file" :   \c "
      read   location
      if [ "$location" = "." ]
        then
          source  ./openrc
        else
          source   "$location"
      fi
 fi
 if  ( !( test  -z "$2"  ))   && ( [ "$1" = "-create" ]  ||  [  "$1" = "-c"  ]  ||  [ "$1" = "--delete" ] || [ "$1" = "-d" ] )
  then
    if [ "$2" = "." ]
        then
          source  ./openrc
        else
          source   "$2"
      fi
   fi




#------------ deletion Command ---------------------


if [ "$1" = "--delete" ] || [ "$1" = "-d" ]
then
       clear
       for ((    ;  1  ;  ))
       do
       echo "                  "
       echo "   List all instances:      "
       echo "                                 "
       openstack server list;
       echo "                                 "
       echo  -e    " Please enter  Instance name  to delete the instance from Project :   \c "
          read  INC
       echo    -e  " Enter Key 'Y'  for Continue Process deletetion OR enter the other keys for Cancel  :  \c "
          read QQ ;

       if [ "$QQ" != "y" ]
          then
              exit;
      else
          openstack server delete "$INC"
          sleep 30 ;
          echo "                     "
          echo " List Instances Remaining from project "
          openstack server list
       fi

     echo  -e " Aru you continue Enter  Y or Enter N / No for Quit   ?   : \c "
     read  bool;
     if [ "$bool" = n ] ||  [ "$bool"  = no ]
     then
        exit;
      fi
   done ;

 fi


#----------- Create  Instance ------------

if  [ "$1" = "--create"  ] || [ "$1" = "-c" ]
then

     for  ((   ; 1 ;   ))
     do
     clear
     echo  "                       "
     echo  -e  "       Please Enter  Instance name  to Create the instance from Project :   \c "
     read  inc_name
     echo  "                       "
     echo  -e  "       Please Enter  Instance Count  to Create the instance from Project :   \c "
     read  inc_count
     echo "                                       "
     echo " Cloud image list   ---> "
     openstack image list
     echo  "                                      "
     echo  -e  "       Please Select  image's name  to Create the instance from  List image :   \c "
     read inc_image
     echo "                                       "
     echo " Cloud Flavor list  ---> "
     openstack flavor list
     echo "                                         "
     echo  -e  "       Please Select  Flavor's name template to Create the instance  :   \c "
     read  inc_flavor
     echo "                                         "
     echo " Cloud Network list  ---> "
     openstack network list
     echo "                      "
     echo  -e  "       Please Select  Network's ID  template to  Create the instance  :   \c "
     read inc_network
     echo "                                    "
     echo " Cloud keypair list  ---> "
     echo "                                    "
     openstack keypair list
     echo  "                                   "
     echo  -e  "       Please Select  Keypair's name  template to Create the instance  :   \c "
     read inc_keypair
     echo "                         "
     echo " Cloud Security_Group list  ---> "
     openstack security group list
     echo "                                   "
     echo  -e  "       Please Select  Security_Gropu's name  template to Create the instance  :   \c "
     read   inc_security
     echo "                                   "
     echo  -e  "       Do you want to assign another security group  ?  Enter Y  for Continue  or   Enter  N for Cancel  \c "
     read  test;
     if [ "$test" = y ] ||  [ "$test"  = yes ]
     then
     echo "                                   "
     openstack security group list
     echo  -e  "       Please Select  Security_Gropu's name  template to Create the instance  :   \c "
     read   inc2_security
     openstack server create --flavor "$inc_flavor"  --image  "$inc_image"  --nic net-id="$inc_network"   --security-group "$inc_security" --security-group "$inc2_security"  --key-name "$inc_keypair"  $inc_name
     else
     echo "                                       "
     openstack server create --flavor "$inc_flavor"  --image  "$inc_image"  --nic net-id="$inc_network"   --security-group "$inc_security"  --key-name "$inc_keypair"  $inc_name
     fi

     sleep 30;
     echo " Create Instance  Provisioning Success "
     echo "                                       "
     echo  -e " Are you continue Enter  Y or Enter N / No for Quit   ?   : \c "
     read  bool;
     if [ "$bool" = n ] ||  [ "$bool"  = no ]
     then
        exit;
     fi
   done
fi




